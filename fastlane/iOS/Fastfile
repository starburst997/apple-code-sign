org, repo = (ENV["GITHUB_REPOSITORY"]||"").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]||"").split("/")

platform :ios do
  lane :init_ci do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates"
  lane :sync_certificates do
    if ENV['USE_SESSION'] != 'true'
      app_store_connect_api_key(
        key_id: ENV["APPSTORE_KEY_ID"],
        issuer_id: ENV["APPSTORE_ISSUER_ID"],
        key_content: ENV['APPSTORE_P8']
      )
    end

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["IOS_BUNDLE_ID"]
    )
  end

  desc "Deliver a new Release build to the App Store"
  lane :release do
    # Missing Export Compliance can also be set through Deliverfile
    update_info_plist(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
      plist_path: "#{ENV['PLIST_PATH']}",
      block: proc do |plist|
        plist['ITSAppUsesNonExemptEncryption'] = false
      end
    )

    build
    upload_to_app_store
  end

  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    # Missing Export Compliance can also be set through Deliverfile
    update_info_plist(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
      plist_path: "#{ENV['PLIST_PATH']}",
      block: proc do |plist|
        plist['ITSAppUsesNonExemptEncryption'] = false
      end
    )
    
    build
    upload_to_testflight(skip_waiting_for_build_processing: false)
  end

  desc "Create .ipa"
  lane :build do
    setup_ci

    sync_certificates

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}"
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_team-id"],
      code_sign_identity: 'iPhone Distribution',
      targets: "#{ENV['PROJECT_TARGET']}",
      path: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
      profile_name: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore"]
    )

    if ENV['ENTITLEMENTS'] != 'false'
      update_code_signing_settings(
        path: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
        entitlements_file_path: "#{ENV['IOS_BUILD_PATH']}/#{ENV['ENTITLEMENTS']}"
      )
    end

    if ENV['VERSION'] != 'false'
      increment_version_number(
        version_number: "#{ENV['VERSION']}.#{ENV['BUILD_NUMBER']}",
        xcodeproj: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}"
      )

      increment_build_number(
        build_number: "#{ENV['BUILD_NUMBER']}",
        xcodeproj: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}"
      )
    end

    update_app_identifier(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
      plist_path: "#{ENV['PLIST_PATH']}",
      app_identifier: "#{ENV['IOS_BUNDLE_ID']}"
    )

    build_app( #alias: gym
      project: "#{ENV['IOS_BUILD_PATH']}/#{ENV['XCODEPROJ_PATH']}",
      output_directory: "#{ENV['BUILD_PATH']}",
      output_name: "appstore.ipa",
      scheme: "#{ENV['PROJECT_TARGET']}",
      xcargs: '-allowProvisioningUpdates'
    )
  end

  # TODO: Create a lane for AD-HOC release, personally, I don't have a use for it so probably won't implement unless someone request it
end