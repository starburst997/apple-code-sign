org, repo = (ENV["GITHUB_REPOSITORY"]||"").split("/")
match_org, match_repo = (ENV["MATCH_REPOSITORY"]||"").split("/")

platform :ios do
  lane :init_ci do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates (API Key)"
  lane :sync_certificates_api_key do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV['APPSTORE_P8']
    )

    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["IOS_BUNDLE_ID"]
    )
  end

  desc "Sync codesigning certificates (Session Token)"
  lane :sync_certificates_session do
    match(
      type: "appstore",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["IOS_BUNDLE_ID"]
    )
  end

  desc "Deliver a new Release build to the App Store"
  lane :release do
    build
    upload_to_app_store
  end

  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    # Missing Export Compliance can also be set through Deliverfile
    update_info_plist(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/Test.xcodeproj",
      plist_path: 'Test/Info.plist',
      block: proc do |plist|
        plist['ITSAppUsesNonExemptEncryption'] = false
      end
    )
    
    build
    upload_to_testflight(skip_waiting_for_build_processing: false)
  end

  desc "Create .ipa"
  lane :build do
    setup_ci

    sync_certificates_api_key

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: "#{ENV['IOS_BUILD_PATH']}/Test.xcodeproj"
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_team-id"],
      code_sign_identity: 'iPhone Distribution',
      targets: 'Test',
      path: "#{ENV['IOS_BUILD_PATH']}/Test.xcodeproj",
      profile_name: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['IOS_BUNDLE_ID']}_appstore"]
    )

    build_app( #alias: gym
      project: "#{ENV['IOS_BUILD_PATH']}/Test.xcodeproj",
      scheme: 'Test',
      xcargs: '-allowProvisioningUpdates'
    )
  end
end

platform :mac do
  lane :init_ci do
    github_action(
      api_token: ENV["GH_PAT"],
      org: org,
      repo: repo,
      match_org: match_org,
      match_repo: match_repo,
      writable_deploy_key: true
    )
  end

  desc "Sync codesigning certificates (API Key)"
  lane :sync_certificates_api_key do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV['APPSTORE_P8'],
      in_house: false
    )

    match(
      type: "appstore",
      additional_cert_types: "mac_installer_distribution",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["MAC_BUNDLE_ID"]
    )

    # Won't work with API Key
    #match(
    #  type: "developer_id",
    #  storage_mode: "git",
    #  git_url: "git@github.com:#{match_org}/#{match_repo}.git",
    #  app_identifier: ENV["MAC_BUNDLE_ID"]
    #)
  end

  desc "Sync codesigning certificates (Session Token)"
  lane :sync_certificates_session do
    match(
      type: "appstore",
      additional_cert_types: "mac_installer_distribution",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["MAC_BUNDLE_ID"]
    )
    
    match(
      type: "developer_id",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["MAC_BUNDLE_ID"]
    )
  end
  
  desc "Sync codesigning certificates (API Key / All)"
  lane :sync_certificates_api_key_all do
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_KEY_ID"],
      issuer_id: ENV["APPSTORE_ISSUER_ID"],
      key_content: ENV['APPSTORE_P8'],
      in_house: false
    )

    match(
      type: "appstore",
      additional_cert_types: "mac_installer_distribution",
      storage_mode: "git",
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["MAC_BUNDLE_ID"]
    )

    match(
      type: "developer_id",
      storage_mode: "git",
      readonly: true,
      git_url: "git@github.com:#{match_org}/#{match_repo}.git",
      app_identifier: ENV["MAC_BUNDLE_ID"]
    )
  end

  desc "Deliver a new Release build to the App Store"
  lane :release do
    build
    upload_to_app_store
  end

  desc "Deliver a new Beta build to Apple TestFlight"
  lane :beta do
    # Missing Export Compliance can also be set through Deliverfile
    update_info_plist(
      xcodeproj: "#{ENV['MAC_BUILD_PATH']}/Test.xcodeproj",
      plist_path: 'Test/Info.plist',
      block: proc do |plist|
        plist['ITSAppUsesNonExemptEncryption'] = false
      end
    )

    build
    upload_to_testflight(skip_waiting_for_build_processing: false)
  end

  desc "Create .app"
  lane :build do
    setup_ci

    sync_certificates_api_key_all

    # Unity has specific requirements around codesigning that we have to handle
    # See https://github.com/fastlane/fastlane/discussions/17458 for context
    update_code_signing_settings(
      use_automatic_signing: true,
      path: "#{ENV['MAC_BUILD_PATH']}/Test.xcodeproj"
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      team_id: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_team-id"],
      code_sign_identity: 'Apple Distribution', # 'Developer ID Application'
      targets: 'Test',
      path: "#{ENV['MAC_BUILD_PATH']}/Test.xcodeproj",
      profile_name: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstor_macos_profile-name"],
      profile_uuid: ENV["sigh_#{ENV['MAC_BUNDLE_ID']}_appstore_macos"]
    )

    build_mac_app( #alias: gym
      #export_method: 'developer-id',
      project: "#{ENV['MAC_BUILD_PATH']}/Test.xcodeproj",
      scheme: 'Test',
      xcargs: '-allowProvisioningUpdates'
    )
  end
end